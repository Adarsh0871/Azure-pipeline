---
- name: Provision AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    region: ap-south-1          # Change to your AWS region
    vpc_cidr: "10.0.0.0/16"
    subnet_cidr: "10.0.1.0/24"
    instance_type: t2.micro     # Safe choice (1 vCPU, within limit)
    ami_id: ami-0e306788ff2473ccb   # Amazon Linux 2 AMI for ap-south-1 (update per region)
    key_name: mykey             # Ensure this key pair exists in AWS

  tasks:

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: my-vpc
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        tags:
          Name: my-vpc
      register: vpc

    - name: Create subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ region }}"
        map_public: yes
        tags:
          Name: my-subnet
      register: subnet

    - name: Create internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: my-igw
      register: igw

    - name: Create route table and associate subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: my-rt
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: route_table

    - name: Create security group allowing SSH and HTTP
      amazon.aws.ec2_group:
        name: my-sg
        description: allow ssh and http
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Launch EC2 instance in subnet
      amazon.aws.ec2_instance:
        name: my-ec2
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        wait: yes
        count: 1
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group: "{{ sg.group_id }}"
        network:
          assign_public_ip: true
        tags:
          Name: my-ec2
      register: ec2

    - name: Output instance public IP
      debug:
        msg: "EC2 instance public IP: {{ ec2.instances[0].public_ip_address }}"
